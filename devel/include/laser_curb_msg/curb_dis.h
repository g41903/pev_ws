// Generated by gencpp from file laser_curb_msg/curb_dis.msg
// DO NOT EDIT!


#ifndef LASER_CURB_MSG_MESSAGE_CURB_DIS_H
#define LASER_CURB_MSG_MESSAGE_CURB_DIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_curb_msg
{
template <class ContainerAllocator>
struct curb_dis_
{
  typedef curb_dis_<ContainerAllocator> Type;

  curb_dis_()
    : r_curb_flag(false)
    , l_curb_flag(false)
    , r_distance(0.0)
    , l_distance(0.0)  {
    }
  curb_dis_(const ContainerAllocator& _alloc)
    : r_curb_flag(false)
    , l_curb_flag(false)
    , r_distance(0.0)
    , l_distance(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _r_curb_flag_type;
  _r_curb_flag_type r_curb_flag;

   typedef uint8_t _l_curb_flag_type;
  _l_curb_flag_type l_curb_flag;

   typedef float _r_distance_type;
  _r_distance_type r_distance;

   typedef float _l_distance_type;
  _l_distance_type l_distance;




  typedef boost::shared_ptr< ::laser_curb_msg::curb_dis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_curb_msg::curb_dis_<ContainerAllocator> const> ConstPtr;

}; // struct curb_dis_

typedef ::laser_curb_msg::curb_dis_<std::allocator<void> > curb_dis;

typedef boost::shared_ptr< ::laser_curb_msg::curb_dis > curb_disPtr;
typedef boost::shared_ptr< ::laser_curb_msg::curb_dis const> curb_disConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_curb_msg::curb_dis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_curb_msg::curb_dis_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_curb_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'laser_curb_msg': ['/home/ubuntu/PEV/pev_ws/src/pev_taf_demo/laser_curb/laser_curb_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_curb_msg::curb_dis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_curb_msg::curb_dis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_curb_msg::curb_dis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f119e578dde3a2fd1de8ff3a7eb42a6b";
  }

  static const char* value(const ::laser_curb_msg::curb_dis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf119e578dde3a2fdULL;
  static const uint64_t static_value2 = 0x1de8ff3a7eb42a6bULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_curb_msg/curb_dis";
  }

  static const char* value(const ::laser_curb_msg::curb_dis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool r_curb_flag\n\
bool l_curb_flag\n\
float32 r_distance\n\
float32 l_distance\n\
";
  }

  static const char* value(const ::laser_curb_msg::curb_dis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r_curb_flag);
      stream.next(m.l_curb_flag);
      stream.next(m.r_distance);
      stream.next(m.l_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct curb_dis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_curb_msg::curb_dis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_curb_msg::curb_dis_<ContainerAllocator>& v)
  {
    s << indent << "r_curb_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r_curb_flag);
    s << indent << "l_curb_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.l_curb_flag);
    s << indent << "r_distance: ";
    Printer<float>::stream(s, indent + "  ", v.r_distance);
    s << indent << "l_distance: ";
    Printer<float>::stream(s, indent + "  ", v.l_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_CURB_MSG_MESSAGE_CURB_DIS_H
