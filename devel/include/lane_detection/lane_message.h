// Generated by gencpp from file lane_detection/lane_message.msg
// DO NOT EDIT!


#ifndef LANE_DETECTION_MESSAGE_LANE_MESSAGE_H
#define LANE_DETECTION_MESSAGE_LANE_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lane_detection
{
template <class ContainerAllocator>
struct lane_message_
{
  typedef lane_message_<ContainerAllocator> Type;

  lane_message_()
    : flag_detected(0)
    , rho(0)
    , theta(0.0)  {
    }
  lane_message_(const ContainerAllocator& _alloc)
    : flag_detected(0)
    , rho(0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _flag_detected_type;
  _flag_detected_type flag_detected;

   typedef int32_t _rho_type;
  _rho_type rho;

   typedef float _theta_type;
  _theta_type theta;




  typedef boost::shared_ptr< ::lane_detection::lane_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lane_detection::lane_message_<ContainerAllocator> const> ConstPtr;

}; // struct lane_message_

typedef ::lane_detection::lane_message_<std::allocator<void> > lane_message;

typedef boost::shared_ptr< ::lane_detection::lane_message > lane_messagePtr;
typedef boost::shared_ptr< ::lane_detection::lane_message const> lane_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lane_detection::lane_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lane_detection::lane_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lane_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'lane_detection': ['/home/ubuntu/PEV/pev_ws/src/pev_highlevel/lane_detection/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lane_detection::lane_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_detection::lane_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_detection::lane_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_detection::lane_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_detection::lane_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_detection::lane_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lane_detection::lane_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37cb1739b1f69cba6b6996620377af4d";
  }

  static const char* value(const ::lane_detection::lane_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37cb1739b1f69cbaULL;
  static const uint64_t static_value2 = 0x6b6996620377af4dULL;
};

template<class ContainerAllocator>
struct DataType< ::lane_detection::lane_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane_detection/lane_message";
  }

  static const char* value(const ::lane_detection::lane_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lane_detection::lane_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Boolean value, indicating whether the left lane is detected\n\
uint8 flag_detected \n\
\n\
# Parameters of the left lane in the ground plane\n\
int32 rho \n\
float32 theta \n\
";
  }

  static const char* value(const ::lane_detection::lane_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lane_detection::lane_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag_detected);
      stream.next(m.rho);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lane_detection::lane_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lane_detection::lane_message_<ContainerAllocator>& v)
  {
    s << indent << "flag_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_detected);
    s << indent << "rho: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rho);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANE_DETECTION_MESSAGE_LANE_MESSAGE_H
